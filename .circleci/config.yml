version: 2.1

commands:

  bootstrap-linux:
    steps:
      - run:
          name: Bootstrap Linux
          command: |
            apt update
            apt install -y pkg-config g++ cmake
            apt install -y zip unzip zlib1g-dev
            apt install -y curl git rsync
            apt install -y python3

            curl -OL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --silent
            bash Miniconda3-latest-Linux-x86_64.sh -b -f

  bootstrap-macos:
    steps:
      - run:
          name: Bootstrap macOS
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap bazelbuild/tap >> build.log
            HOMEBREW_NO_AUTO_UPDATE=1 brew install bazelbuild/tap/bazel >> build.log
            HOMEBREW_NO_AUTO_UPDATE=1 brew install gmp >> build.log
            HOMEBREW_NO_AUTO_UPDATE=1 brew install mmv >> build.log

            curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh --silent
            bash Miniconda3-latest-MacOSX-x86_64.sh -b -f >> build.log

  create-pyenv-build:
    # Create new Python virtual environment with requirements-dev.txt installed
    parameters:
      python-version:
        type: string
      python-environment:
        type: string
        default: tfbig-build-py<< parameters.python-version >>
    steps:
      - run:
          name: Create Python << parameters.python-version >> build environment '<< parameters.python-environment >>'
          command: |
            ../miniconda3/bin/conda create -n << parameters.python-environment >> python=<< parameters.python-version >> 2> /dev/null || true
            ../miniconda3/envs/<< parameters.python-environment >>/bin/python -m venv venv-<< parameters.python-environment >>
            . venv-<< parameters.python-environment >>/bin/activate
            pip install -q -r requirements-dev.txt

  create-pyenv-test:
    # Create new Python virtual environment
    parameters:
      python-version:
        type: string
      python-environment:
        type: string
        default: tfbig-test-py<< parameters.python-version >>
    steps:
      - run:
          name: Create Python << parameters.python-version >> test environment '<< parameters.python-environment >>'
          command: |
            ../miniconda3/bin/conda create -n << parameters.python-environment >> python=<< parameters.python-version >> 2> /dev/null || true
            ../miniconda3/envs/<< parameters.python-environment >>/bin/python -m venv venv-<< parameters.python-environment >>
            . venv-<< parameters.python-environment >>/bin/activate

  configure-pyenv:
    parameters:
      python-environment:
        type: string
      tensorflow-version:
        type: string
    steps:
      - run:
          name: Configure '<< parameters.python-environment >>' to use TensorFlow << parameters.tensorflow-version >>
          command: |
            . venv-<< parameters.python-environment >>/bin/activate
            make clean
            pip install -q -U tensorflow==<< parameters.tensorflow-version >>
            make .bazelrc
            # reduce Bazel output to logs
            echo 'test --noshow_progress --noshow_loading_progress' >> .bazelrc
            echo 'build --noshow_progress --noshow_loading_progress' >> .bazelrc

  build-tagged:
    parameters:
      python-environment:
        type: string
      tensorflow-version:
        type: string
      tagged-directory:
        type: string
    steps:
      - configure-pyenv:
          python-environment: << parameters.python-environment >>
          tensorflow-version: << parameters.tensorflow-version >>
      - run:
          name: Build for TensorFlow << parameters.tensorflow-version >> using '<< parameters.python-environment >>'
          command: |
            . venv-<< parameters.python-environment >>/bin/activate
            pip freeze
            DIR_TAGGED=<< parameters.tagged-directory >> make build-tagged
  
  package-bundle:
    parameters:
      python-environment:
        type: string
      tagged-directory:
        type: string
      wheel-directory:
        type: string
    steps:
      - run:
          name: Bundle package using '<< parameters.python-environment >>'
          command: |
            . venv-<< parameters.python-environment >>/bin/activate
            pip freeze
            DIR_TAGGED=<< parameters.tagged-directory >> DIR_WHEEL=<< parameters.wheel-directory >> make package-bundle

jobs:

  test-linux:
    parameters:
      python-version:
        type: string
      tensorflow-version:
        type: string
      python-environment:
        type: string
        default: tfbig-build-py<< parameters.python-version >>
    docker:
      - image: tfencrypted/tf-big:0.1.0
    working_directory: ~/repo
    steps:
      - checkout
      - bootstrap-linux
      - create-pyenv-build:
          python-version: << parameters.python-version >>
          python-environment: << parameters.python-environment >>
      - configure-pyenv:
          tensorflow-version: << parameters.tensorflow-version >>
          python-environment: << parameters.python-environment >>
      - run:
          name: Run tests
          command: |
            . venv-<< parameters.python-environment >>/bin/activate
            pip freeze
            make test

  test-macos:
    parameters:
      python-version:
        type: string
      tensorflow-version:
        type: string
      python-environment:
        type: string
        default: tfbig-build-py<< parameters.python-version >>
    macos:
      xcode: "10.0.0"
    working_directory: ~/repo
    steps:
      - checkout
      - bootstrap-macos
      - create-pyenv-build:
          python-version: << parameters.python-version >>
          python-environment: << parameters.python-environment >>
      - configure-pyenv:
          tensorflow-version: << parameters.tensorflow-version >>
          python-environment: << parameters.python-environment >>
      - run:
          name: Run tests
          command: |
            . venv-<< parameters.python-environment >>/bin/activate
            pip freeze
            make test

  package-build-macos:
    parameters:
      python-version:
        type: string
      python-environment:
        type: string
        default: tfbig-build-py<< parameters.python-version >>
    macos:
      xcode: "10.0.0"
    working_directory: ~/repo
    steps:
      - checkout
      - bootstrap-macos
      - create-pyenv-build:
          python-version: << parameters.python-version >>
          python-environment: << parameters.python-environment >>
      - run:
          name: Clear intermediate directories
          command: |
            rm -rf ./tagged
            rm -rf ./wheelhouse
      # build all tagged versions
      - build-tagged:
          python-environment: << parameters.python-environment >>
          tensorflow-version: "1.13.1"
          tagged-directory: ./tagged
      - build-tagged:
          python-environment: << parameters.python-environment >>
          tensorflow-version: "1.13.2"
          tagged-directory: ./tagged
      - build-tagged:
          python-environment: << parameters.python-environment >>
          tensorflow-version: "1.14.0"
          tagged-directory: ./tagged
      # bundle up into wheel
      - package-bundle:
          python-environment: << parameters.python-environment >>
          tagged-directory: ./tagged
          wheel-directory: ./wheelhouse
      # save for test and deployment
      - persist_to_workspace:
          root: ./wheelhouse
          paths:
            - "*.whl"

  package-test-macos:
    parameters:
      python-version:
        type: string
      python-environment:
        type: string
        default: tfbig-test-py<< parameters.python-version >>
    macos:
        xcode: "10.0.0"
    working_directory: ~/repo
    steps:
      - checkout
      - bootstrap-macos
      - create-pyenv-test:
          python-version: << parameters.python-version >>
          python-environment: << parameters.python-environment >>
      - attach_workspace:
          at: wheelhouse
      - run:
          name: Test package
          command: |
            . venv-<< parameters.python-environment >>/bin/activate
            pip install -U ./wheelhouse/*.whl
            make package-test

  # test-package-macos-py36:
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py36
  #     - attach_workspace:
  #         at: wheelhouse
  #     - run:
  #         name: Test package
  #         command: |
  #           . venv-py36/bin/activate
  #           make clean
  #           make package-test

  # test-package-linux:
  #   docker:
  #     - image: ubuntu:19.04
  #   working_directory: ~/repo
  #   steps:
  #     - run:
  #         name: certs
  #         command: |
  #           apt update
  #           apt install -y ca-certificates
  #     - checkout
  #     - attach_workspace:
  #         at: artifacts
  #     - *bootstrap

workflows:
  version: 2

  quicktest:
    # this workflow runs on every push to the repository and performs only
    # a few tests against latest versions of TensorFlow; build workflows
    # will perform more through testing later
    jobs:
      # NOTE(Morten) 
      # - only run one test on macOS since it's sequential
      # - run a few on Linux since it's running in parallel
      - test-macos:
          name: test-macos-py3.6-tf1.14.0
          python-version: "3.6"
          tensorflow-version: "1.14.0"
      - test-linux:
          name: test-linux-py3.6-tf1.13.2
          python-version: "3.6"
          tensorflow-version: "1.13.2"
      - test-linux:
          name: test-linux-py3.6-tf1.14.0
          python-version: "3.6"
          tensorflow-version: "1.14.0"
  
  test:
    jobs:
      # macOS, Python 3.5
      - package-build-macos:
          name: package-build-macos-py3.5
          python-version: "3.5"
      - package-test-macos:
          name: package-test-macos-py3.5
          python-version: "3.5"
          requires:
            - package-build-macos-py3.5
      # # macOS, Python 3.6
      # - build-package-macos:
      #     name: build-package-macos-py3.6
      #     python-version: "3.6"
      # - test-package-macos:
      #     name: test-package-macos-py3.6
      #     requires:
      #       - build-package-macos-py3.6
