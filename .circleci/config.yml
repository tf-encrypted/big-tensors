version: 2.1

variables:

  # bootstrap-venv-py35: &bootstrap-venv-py35
  #   run:
  #     name: Create Python environment
  #     command: |
  #       ../miniconda3/bin/conda create -n py3.5 python=3.5 2> /dev/null || true
  #       ../miniconda3/envs/py35/bin/python -m venv venv-py35
  #       . venv-py35/bin/activate
  #       pip install -q -r requirements-dev.txt

  # bootstrap-pyenv: &bootstrap-pyenv
  #   run:
  #     name: Create Python environment
  #     command: |
  #       ../miniconda3/bin/conda create -n py<< parameters.python-version >> python=<< parameters.python-version >> 2> /dev/null || true
  #       ../miniconda3/envs/py<< parameters.python-version >>/bin/python -m venv venv-py<< parameters.python-version >>
  #       . venv-py<< parameters.python-version >>/bin/activate
  #       pip install -q -r requirements-dev.txt

  # bootstrap-venv-py37: &bootstrap-venv-py37
  #   run:
  #     name: Create Python environment
  #     command: |
  #       ../miniconda3/bin/conda create -n py37 python=3.7 2> /dev/null || true
  #       ../miniconda3/envs/py37/bin/python -m venv venv-py37
  #       . venv-py37/bin/activate
  #       pip install -q -r requirements-dev.txt

  bootstrap-linux: &bootstrap-linux
    run:
      name: bootstrap linux
      command: |
        apt update
        apt install -y pkg-config zip g++ zlib1g-dev unzip python3 cmake curl git rsync

        curl -OL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        bash Miniconda3-latest-Linux-x86_64.sh -b -f

        ../miniconda3/bin/conda create -n py35 python=3.5 2> /dev/null || true
        ../miniconda3/envs/py35/bin/python -m venv venv-py35
        . venv-py35/bin/activate
        pip install -r requirements-dev.txt

        ../miniconda3/bin/conda create -n py36 python=3.6 2> /dev/null || true
        ../miniconda3/envs/py36/bin/python -m venv venv-py36
        . venv-py36/bin/activate
        pip install -r requirements-dev.txt

  bootstrap-macos: &bootstrap-macos
    run:
      name: Bootstrap macOS
      command: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew tap bazelbuild/tap >> build.log
        HOMEBREW_NO_AUTO_UPDATE=1 brew install bazelbuild/tap/bazel >> build.log
        HOMEBREW_NO_AUTO_UPDATE=1 brew install gmp >> build.log
        HOMEBREW_NO_AUTO_UPDATE=1 brew install mmv >> build.log

        curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh --silent
        bash Miniconda3-latest-MacOSX-x86_64.sh -b -f >> build.log

commands:

  bootstrap-pyenv:
    description: Bootstrap Python environment
    parameters:
      python-version:
        type: string
    steps:
      # - run: command |
      #     ../miniconda3/bin/conda create -n py<< parameters.python-version >> python=<< parameters.python-version >> 2> /dev/null || true
      #     ../miniconda3/envs/py<< parameters.python-version >>/bin/python -m venv venv-py<< parameters.python-version >>
      #     . venv-py<< parameters.python-version >>/bin/activate
      #     pip install -q -r requirements-dev.txt
      - run: ../miniconda3/bin/conda create -n py<< parameters.python-version >> python=<< parameters.python-version >> 2> /dev/null || true
      - run: ../miniconda3/envs/py<< parameters.python-version >>/bin/python -m venv venv-py<< parameters.python-version >>
      - run: . venv-py<< parameters.python-version >>/bin/activate
      - run: pip install -q -r requirements-dev.txt

jobs:

  # build-linux:
  #   docker:
  #     - image: tfencrypted/tf-big:0.1.0
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - run:
  #         name: run tests
  #         command: |
  #           . /venv-py35/bin/activate
  #           export LD_LIBRARY_PATH=/usr/local
  #           make clean
  #           make test
  #     - run:
  #         name: build pip
  #         command: |
  #           . /venv-py35/bin/activate
  #           make clean
  #           make build
  #           . /venv-py36/bin/activate
  #           make clean
  #           make build

  #           for filename in artifacts/*; do
  #             auditwheel repair $filename
  #           done
  #     - store_artifacts:
  #         path: wheelhouse

  test-macos:
    parameters:
      python-version:
        type: string
      tensorflow-version:
        type: string
    macos:
      xcode: "10.0.0"
    working_directory: ~/repo
    steps:
      - checkout
      - *bootstrap-macos
      - bootstrap-pyenv:
          python-version: << parameters.python-version >>
      - run:
          name: Configure test environment
          command: |
            . venv-py<< parameters.python-version >>/bin/activate
            make clean
            pip install -q -U tensorflow==<< parameters.tensorflow-version >>
            make .bazelrc
            # reduce Bazel output to logs
            echo 'test --noshow_progress --noshow_loading_progress' >> .bazelrc
            echo 'build --noshow_progress --noshow_loading_progress' >> .bazelrc
      - run:
          name: Run tests
          command: |
            . venv-py<< parameters.python-version >>/bin/activate
            pip freeze
            make test

  build-macos:
    macos:
      xcode: "10.0.0"
    working_directory: ~/repo
    steps:
      - run:
          name: Prepare intermediate output directory
          command: |
            rm -rf ./tagged
      - run:
          name: Configure build environment
          command: |
            . venv-py36/bin/activate
            make clean
            pip install -q -U tensorflow==1.14.0
            make .bazelrc
      - run:
          name: Build tagged
          command: |
            . venv-py36/bin/activate
            pip freeze
            make build-tagged

  # test-build-macos:
  #   parameters:
  #     pyenv-activate-cmd:
  #       # default: venv-py36/bin/activate
  #       type: string
  #     tensorflow-version:
  #       # default: 1.14.0
  #       type: string
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py35
  #     # - *bootstrap-venv-py36
  #     - run:
  #         name: Configure
  #         command: |
  #           . << parameters.pyenv-activate-cmd >>
  #           pip install -U tensorflow==<< parameters.tensorflow-version >>
  #     - run:
  #         name: Run tests
  #         command: |
  #           make clean
  #           make test
  #     - run:
  #         name: Build tagged files
  #         command: |
  #           make clean
  #           make build-tagged

  # build-package-macos:
  #   parameters:
  #     pyenv-activate-cmd:
  #       type: string
  #     # tensorflow-version:
  #     #   type: string
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py35
  #     # - *bootstrap-venv-py36
  #     - run:
  #         name: Build package
  #         command: |
  #           . << parameters.pyenv-activate-cmd >>
  #           make clean
  #           make package-build
  #     - persist_to_workspace:
  #         root: wheelhouse
  #         paths:
  #           - "*.whl"

  # build-package-macos-py35:
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   parameters:
  #     pyenv-activate-cmd:
  #       type: string
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py35
  #     - run:
  #         name: Build package
  #         command: |
  #           . << parameters.pyenv-activate-cmd >>
  #           make clean
  #           make package-build
  #     - persist_to_workspace:
  #         root: wheelhouse
  #         paths:
  #           - "*.whl"

  # build-package-macos-py36:
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py36
  #     - run:
  #         name: build package
  #         command: |
  #           . venv-py36/bin/activate
  #           make clean
  #           make package-build
  #     - persist_to_workspace:
  #         root: wheelhouse
  #         paths:
  #           - "*.whl"

  # test-package-macos-py35:
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py35
  #     - attach_workspace:
  #         at: wheelhouse
  #     - run:
  #         name: Test package
  #         command: |
  #           . venv-py35/bin/activate
  #           make clean
  #           make package-test

  # test-package-macos-py36:
  #   macos:
  #       xcode: "10.0.0"
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - *bootstrap-macos
  #     - *bootstrap-venv-py36
  #     - attach_workspace:
  #         at: wheelhouse
  #     - run:
  #         name: Test package
  #         command: |
  #           . venv-py36/bin/activate
  #           make clean
  #           make package-test

  # test-package-linux:
  #   docker:
  #     - image: ubuntu:19.04
  #   working_directory: ~/repo
  #   steps:
  #     - run:
  #         name: certs
  #         command: |
  #           apt update
  #           apt install -y ca-certificates
  #     - checkout
  #     - attach_workspace:
  #         at: artifacts
  #     - *bootstrap

workflows:
  version: 2
  quicktest:
    jobs:
      # this workflow runs on every push to the repository and performs only
      # a few tests against latest versions of TensorFlow; build workflows
      # will perform more through testing later
      - test-macos:
          name: test-macos-36-1.13.2
          python-version: "3.6"
          tensorflow-version: "1.13.2"
      - test-macos:
          name: test-macos-36-1.14.0
          python-version: "3.6"
          tensorflow-version: "1.14.0"
  # build:
  #   jobs:

  # build:
  #   jobs:
  #     - build-macos:
  #         ame: build-macos-1.13.1
  #         pyenv-activate-cmd: "venv-py35/bin/activate"
  #         tensorflow-version: "1.13.1"
  #     - build-macos:
  #         ame: build-macos-1.13.2
  #         pyenv-activate-cmd: "venv-py35/bin/activate"
  #         tensorflow-version: "1.13.2"
  #     - build-macos:
  #         ame: build-macos-1.14.0
  #         pyenv-activate-cmd: "venv-py35/bin/activate"
  #         tensorflow-version: "1.14.0"

  #     - build-package-macos:
  #         pyenv-activate-cmd: "venv-py35/bin/activate"
  #         requires:
  #           - test-macos-1.13.1
  #           - test-macos-1.13.2
  #           - test-macos-1.14.0
      # - test-package-macos-py35:
      #     requires:
      #       - build-package-macos-py35
  # build-package-py36:
  #   jobs:
  #     - test-macos:
  #         pyenv-activate-cmd: "venv-py36/bin/activate"
  #         tensorflow-version: "1.13.1"

      # - test-macos-py36
      # - build-package-macos-py36:
      #     requires:
      #       - test-macos-py36
      # - test-package-macos-py36:
      #     requires:
      #       - build-package-macos-py36
